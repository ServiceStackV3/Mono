<html>
<head>
    <title>Service Stack Overview</title>
    <link rel="stylesheet" type="text/css" href="default.css" />
</head>
<body class="host">

<div id="header">
	<a id="btn-googlecode" href="https://github.com/ServiceStack/ServiceStack" title="go to service stack project on GitHub"><img src="btn-github.png" alt="GitHub project" alt="ServiceStack GitHub logo" /></a>

	<a href="http://mono.servicestack.net" title="Open source Mono and .NET web service framework"><img src="logo-servicestack.png" alt="Service Stack" /></a>
	<h3 id="logo-title">Opensource .NET and Mono REST Webservices framework</h3>
</div>



<div id="content">
<div id="top-nav"><a href="default.htm">&lt; back</a></div>

<h2>About Service Stack</h2>

<p>
	With a primary focus on <strong>simplicity and speed</strong>, ServiceStack allows development of web services code-first, using normal C# objects.
	Using strong-typed DTO's provides a well-defined contract for your web service as well as enabling us to infer a richer intelligence about them,
	allowing the auto-generation of documentation metadata pages, auto-configuration of popular formats (XML,JSON,HTML,CSV,JSV) and endpoints (REST,RPC,SOAP),
	all <strong>without any configuration or code-gen required</strong>.
	All whilst still providing a clean, succinct, strong-typed API, for a friction-free development experience.
</p>

<p>
	From end-to-end it's built using only the fastest open source components available.
	Avoiding all unnecessary overheads where possible, e.g. chosing only to use .NET's raw, lightweight <b>IHttpHandlers</b>.
</p>

<p>
	When the .NET Framework fails to provide efficient implementations in our pipeline, we replace it with our own efficient implementations.
	As done in <strong><a href="https://github.com/ServiceStack/ServiceStack.Text">ServiceStack.Text</a></strong>
	now maintaining the fastest Text serializers available for .NET - now with JSON, CSV, JSV formats that are over
	<strong><a href="http://mono.servicestack.net/mythz_blog/?p=344">3.6x faster then the fastest JSON serializer in .NET</a></strong>.
</p>

<p>
	Out-of-the-box it's also bundled with libraries to assist the development of high-performance and scalable web services with
	<a href="https://github.com/ServiceStack/ServiceStack/wiki/Caching">a multitude of caching options</a>
	as well as the leading <a href="https://github.com/ServiceStack/ServiceStack.Redis">ServiceStack.Redis C# Client</a>
	for <a href="http://redis.io">Redis</a> - <a href="http://redis.io/topics/benchmarks">The fastest NoSQL DB in the world</a>.
</p>

<p>
	Developed in the modern era, it has first-class support for IOC, testing and convention-based development
	enabling you to to develop your webservices entirely using pure, clean <acronym title="Plain Old CSharp Objects">POCO</acronym>
	DataContract's, decoupled from the endpoint that it is hosted on.
</p>

<p>
	These same <acronym title="Data Tranfer Objects">DTO</acronym>'s can later be shared with any .NET client application
	eliminating the need for any generated code.
</p>

<p>
	<strong><a href="http://mono.servicestack.net/ServiceStack.Hello">Creating a web service</a></strong>
	 is done by adding a new Request and Response DataContract and the <strong>Service</strong> to handle them.
	With just a single build and no other configuration required, they are immediately discoverable and callable.
</p>

<p>
	Services can run on both
	<b><a href="http://www.mono-project.com">Mono</a></b> and the <b><a href="http://www.microsoft.com/NET/">.NET Framework</a></b>
	and be hosted in either in a stand-alone mode or together with an existing ASP.NET Web Application framework.
	or detached from a web server, inside a Windows Service or Console application.
</p>

<div id="top-nav"><a href="default.htm">&lt; back</a></div>

</div>

<span class="r"></span>
<div id="footer">
	Copyright &copy; 2010 Liquidbit Limited. All rights reserved.
</div>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-7722718-7");
pageTracker._trackPageview();
} catch(err) {}</script>
</body>
</html>
