<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Open source .NET and Mono web services framework</title>
    <link rel="stylesheet" type="text/css" href="../default.css" />
    <link href='http://fonts.googleapis.com/css?family=Droid+Sans' rel='stylesheet' type='text/css'>

	<style type="text/css">
		#content {
			margin:0;
			padding:0;
			width: auto;
		}
		#content a
		{
			color: #205AAF !important;
		}
		#content h3 {
			color: #666;
			margin: 10px 0 0 0;
			padding: 10px 0;
		}
		H2 {
			margin: 5px 0;
		}
		H4 {
			color: #205AAF;
		}
		img {
			margin:0;
			padding:0;
			vertical-align: bottom;
		}
		img[align=left] {
			padding: 0 10px 0 0;
		}
		#feature {
			padding: 0;
		}
		pre{margin:1em 0;font-size:12px;background-color:#eee;border:1px solid #ddd;padding:5px;line-height:1.5em;color:#444;overflow:auto;-webkit-box-shadow:rgba(0,0,0,0.07) 0 1px 2px inset;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px;}
		pre::-webkit-scrollbar{height:8px;width:8px;}
		pre::-webkit-scrollbar-track-piece{margin-bottom:10px;background-color:#e5e5e5;border-bottom-left-radius:4px 4px;border-bottom-right-radius:4px 4px;border-top-left-radius:4px 4px;border-top-right-radius:4px 4px;}
		pre::-webkit-scrollbar-thumb:vertical{height:25px;background-color:#ccc;-webkit-border-radius:4px;-webkit-box-shadow:0 1px 1px rgba(255,255,255,1);}
		pre::-webkit-scrollbar-thumb:horizontal{width:25px;background-color:#ccc;-webkit-border-radius:4px;}
		pre code{padding:0!important;font-size:12px!important;background-color:#eee!important;border:none!important;}

		kbd {
			background-color:#eee;
			padding: 1px 2px;
		}
		pre {
			margin: 20px 40px;
		}
		acronym {
			background-color:#f1f1f1;
			border-bottom: 1px dotted #063;
		}
	</style>
</head>
<body class="host">

<div id="header">
	<a id="btn-googlecode" href="https://github.com/ServiceStack/" title="go to Service Stack projects on GitHub"><img src="../btn-github.png" alt="GitHub project" alt="ServiceStack GitHub logo" /></a>

	<a href="http://mono.servicestack.net" title="Open source Mono and .NET web service framework"><img src="../logo-servicestack-xmas.png" alt="Service Stack" /></a>
	<h3 id="logo-title">Upgrade to a cleaner, faster, REST API-enabled ASP.NET MVC</h3>

	<div id="breadcrumbs">
		<a href="https://twitter.com/ServiceStack">@ServiceStack</a>
		| <a href="http://mono.servicestack.net/benchmarks/">benchmarks</a>
		| <a href="http://mono.servicestack.net/docs/">documentation</a>
		| <a href="http://stackoverflow.com/search?q=servicestack">on stackoverflow</a>
		| <a href="http://mono.servicestack.net/mythz_blog/">blog</a>		
	</div>
</div>

<div id="content">

	<h2>Super charge your ASP.NET MVC website with ServiceStack's MVC PowerPack!</h2>
	<span class="summary">
		ASP.NET MVC is a fine web framework but ships with some inefficient and ugly parts by default and misses others, vital in this Internet age! <br/>
		So like a .NET Santa, ServiceStack is in town to fill in gaps with goodies - because even good frameworks need love too :)
	</span>

	<img id="feature" src="servicestack-powerpack.png" align="right" alt="ServiceStack MVC PowerPack!" />
	<p>TL;DR - ServiceStack boosts your MVC website and is a dead-easy install with:</p>

    <div class="nuget-badge" style="width:550px;font-size:13px">
        <p>
            <code>PM&gt; Install-Package ServiceStack.Host.Mvc</code>
        </p>
    </div>


	<h3>The ugly side of ASP.NET MVC</h3>

	<ul>
		<li>
			No <acronym title="Inversion of Control">IOC</acronym>. Promotes static vars and an unhealthy use of XML Configuration
		</li>	
		<li>
			Uses .NET's slowest JSON serializer
		</li>
		<li>
			No abstract and testable logging or configuration framework
		</li>
		<li>
			Cache and Session providers are untestable and mandate XML config
		</li>
		<li>
			ASP.NET's Session provider has a 
			<a href="http://stackoverflow.com/questions/3629709/i-just-discovered-why-all-asp-net-websites-are-slow-and-i-am-trying-to-work-out">degrading performance issue by design</a>
		</li>
		<li>
			Includes .NET's slowest <acronym title="Object-relational mapping">ORM</acronym> in Entity Framework
		</li>
		<li>
			No REST or Web Service Framework for developing 3rd Party APIs
		</li>
	</ul>

	<h3 style="color:#063;">ServiceStack is coming to town! (bearing gifts :)</h3>

	<p>
		Even if you don't intend to use its Web Services framework, you can still take advantage of ServiceStack's highly-optimized, testable components enabling better code-practices and faster response times!
	</p>

	<h4>IOC - Funq</h4>
	<p>
		<img src="greatcode.jpg" alt="json" align="left" />
		Although MVC was developed emphasizing <a href="http://www.codeproject.com/KB/interviews/Interview-Phil-Haack.aspx">separation of concerns and writing testable maintainable code</a> 
		it fails the final hurdle by not including an IOC - i.e. the most important ingredient influencing the creation of testable, loosely-coupled and maintainable code. 
	</p>
	<p>
		Without an IOC you're led to using test-inhibiting static variables whilst the composition of your app dependencies is relegated down to its in-flexible XML Config. <br/>
		Only the configurable parts of your application should be in your Web.config as code remains the superior way to define and compose your apps dependencies and has the advantages of being debuggable and statically verifiable at compile-time.
	</p>
	<p>
		Already well known to 
		<a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID</a> developers, an IOC promotes well-designed architecture yet it only takes a little IOC to reap its great rewards. <br/> 
		As it makes a great first IOC, we've included <a href="https://twitter.com/#!/KZU">@kzu's</a> <a href="http://funq.codeplex.com/">Funq</a> because of its tiny size, 
		<a href="http://mono.servicestack.net/benchmarks/#munq">excellent perf and memory characteristics</a> that sports an intuitive, friendly, code-centric interface. <br/>
	</p>
	<p>
		To use: register all your dependencies in the new 
		<a href="https://github.com/ServiceStack/ServiceStack/blob/master/NuGet/ServiceStack.Host.Mvc/content/App_Start/AppHost.cs.pp#L38">AppHost</a> 
		which are then automatically wired to the public properties or constructor of your MVC Controllers or ServiceStack web services. If you're already playing for team IOC, you likely have your preferred IOC player which you can draft pick instead 
		<a href="https://github.com/ServiceStack/ServiceStack/wiki/The-IoC-container">from this wiki page</a>.
	</p>
	<i style="text-align:center;display:block;">
		A great resource if you're new to IOC/<acronym title="Dependency Injection">DI</acronym> and <acronym title="Test Driven Development">TDD</acronym> is Daniel Cazzulino ScreenCast series showing how he
		<a href="http://blogs.clariusconsulting.net/kzu/funq-screencast-series-on-how-to-building-a-di-container-using-tdd/">developed Funq using TDD</a>.
	</i>

	<h4>JSON</h4>
	<p>
		<img src="json100.png" alt="json" align="left" />
		In the age of Ajax, instant utility and response times reigning supreme experiences, we're still not sure what led the MVC team to bundle .NET's most inefficient 
		(<a href="http://www.danrigsby.com/blog/index.php/2008/05/28/javascriptserializer-undeprecated-in-net-35-sp1/">and previously deprecated</a>) JSON Serializer in JavaScriptSerializer.
		
		The lack of a JSON serializer with decent performance in .NET has some developers resorting to
		<a href="https://twitter.com/#!/MikaelEliasson/status/141113725263417344">ugly hacks</a> 
		and has caused us <a href="http://mono.servicestack.net/mythz_blog/?p=344">to develop our own JSON serializer</a> (also included) replacing .NET's slowest serializer with 
		<a href="http://mono.servicestack.net/benchmarks/#burningmonk-json">.NET's fastest</a> - for multiple of times better JSON performance! <br />
		We feel the CPU heat energy savings could be put to better use, like toasting marshmallows over a warm xmas fire :)
	</p>
	<p>
		As JSON is quickly becoming the 
		<a href="http://www.infoq.com/presentations/Heretical-Open-Source">worlds most important wire format</a>, many websites have already changed their MVC websites to use ServiceStack's JsonSerializer including .NET's own MVC champion - <a href="http://www.stackoverflow.com">stackoverflow.com</a>.
	</p>
	<i style="text-align:center;display:block;">
		To easily use ServiceStack's new Cache, Session &amp; JSON Serializer have your Controllers inherit 
		<a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.FluentValidation.Mvc3/Mvc/ServiceStackController.cs">ServiceStackController.cs</a> or 
		<a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.WebHost.IntegrationTests/PageBase.cs">PageBase.cs</a> (ASP.NET)

	</i>

	<h3>Escaping XML config jail</h3>
	<p>
		<img src="webconfig.png" alt="web.config" align="left" />
		.NET's config model was conceived during the great hype of XML, a time where XML was the most sought buzzword prompting most enterprise-serving-companies to wedge it in their products' stockings or find some other way to be word-associated with it. Yet when the hype dies down, value proposition is the only thing to keep it standing, and against well-designed code - it's found wanting.	<br/>
		It's consistently more verbose, a poorer object model fit, creating more friction in a less capable language that only becomes further compounded when it needs to be duplicated to run in different host projects e.g. test projects.
	</p>
	<p>
		Unfortunately like most legacy tech the only way to be free of it, is to have a clean-break. There will never be a perfect lib implementation sufficing all use-cases, out-lasting the test of time. 
		In order to avoid needing rewrites to take advantage of shinier tech, we prepare for it, in the cleanest way possible, by binding to interfaces not implementations - and the best way to package
		these interfaces is in a implementation / dependency-free dll.
	</p>
	<p>
		And like all our good advice, we like adhering to it :) where all ServiceStack providers detailed below implement clean, unimpeded interfaces contained in the implementation-free 
		<a href="https://github.com/ServiceStack/ServiceStack/tree/master/src/ServiceStack.Interfaces">ServiceStack.Interfaces</a> Project.
	</p>

	<h4>Caching</h4>
	<img src="cache.png" alt="cache" align="right" />
	<p>
		Probably the most important facet in high-performance websites is Caching, which we feel should be a first-class concept, decoupled from the framework and made available like every other dependency so it remains testable, swappable and configurable allowing fine-grained control and a multi-tude of caching patterns inside your domain logic. 
	</p>
	<p>
		With this goal <a href="https://github.com/ServiceStack/ServiceStack/wiki/Caching">ServiceStack's Caching API</a> includes a rich set of functionality and providers:
	</p>
	<ul>
		<li>In Memory</li>
		<li>Redis</li>
		<li>Memcached</li>
		<li>Disk Based</li>
	</ul>

	<h4>Session</h4>
	<p>
		If your pages are enchanced with Ajax you can quickly run into 
		<a href="http://stackoverflow.com/questions/3629709/i-just-discovered-why-all-asp-net-websites-are-slow-and-i-am-trying-to-work-out">ASP.NET's flawed Session design</a> 
		where any write access to the Users Session is <b>locked for the entire request</b>. Common symptoms of this limitation include degraded response times for your pages and ajax requests.
	</p>
	<p>
		Not being strong fans of un-intended, debilitating magic behaviour, we provide our own simple yet flexible 
		<a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/CacheAccess/ISession.cs">ISession API</a>
		that takes advantage of our Caching API so User Sessions can be stored in any of the above Caching Providers.
	</p>
	<p>
		The same <kbd>ISession</kbd> is available to both MVC Controllers and ServiceStack's Web Services that share the same Cookie Id allowing you to freely share data between these 2 web frameworks.
	</p>

	<h4>ServiceStack.Logging</h4>
	<p>
		Even in the spirit of bind to interfaces, not implemenations, many .NET projects still have a hard dependency to their logging implementation. 
		We still don't think it's a good idea so we provide an 
		<a href="https://github.com/ServiceStack/ServiceStack.Logging">abstract logging framework</a> with Elmah, Log4Net, NLog, EventLog, Console, Debug and Null logging adapters available.
	</p>

	<a name="appsettings"></a>
	<h4>Configuration AppSettings</h4>
	<p>
		Despite being avid protesters in the anti-XML config movement, we're still 100% for app Config in general though it should be limited to what's actually configurable by your application.
		Instead of building tiered configSection manatees we prefer to store structured data in Web.config's appSetting's values which is still able to express rich config graphs but does so in a much more human-friendly and manageable size.
	</p>
	<p>
		To this end we provide our own pluggable <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/Configuration/AppSettings.cs">AppSettings</a>
		to provide high-level utility methods to read your Web.config's <b>&lt;appSetting/&gt;</b> values into a List, Dictionary or your own Custom Type using the 
		<a href="http://mono.servicestack.net/docs/text-serializers/jsv-format">human friendly JSV format</a>.
	</p>
	<p>
		Benefits over existing Configuration API include the ability to store rich data stuctures in appSettings values, more succinct access to typed data and since its an interface it can easily be swapped to source your configuration from an different source (e.g. from a central DB) without a rewrite. <br/>
		Here's a quick example show-casing its use:
	</p>
		
<pre><code class="src">&lt;appSettings&gt;
	&lt;add key="LastUpdated" value="01/01/2012 12:00:00" /&gt;
	&lt;add key="AllowedUsers" value="Tom,Mick,Harry" /&gt;
	&lt;add key="RedisConfig" value="{Host:localhost,Port:6379,Database:1,Timeout:10000}" /&gt;
&lt;/appSettings&gt;
...
IResourceManager appSettings = new AppSettings();
DateTime lastUpdate = appSettings.Get&lt;DateTime&gt;("LastUpdated");
IList&lt;string&gt; allowedUsers = appSettings.GetList("AllowedUsers");
var redisConf = appSettings.Get&lt;RedisConfig&gt;("RedisConf");
var searchUrl = appSettings.Get("SearchUrl", "http://www.google.com"); //use default value if no config exists
</code></pre>

	<p>
		The default value is particularly nice as you can have workable default options in code whilst its overridable in the Web.config when you need to.
	</p>

	<h4>The Entity Framework problem</h4>
	<p>
		<img src="entityframework.png" alt="web.config" align="left" />
		If you're not concerned about poor performance or being surprised by the occaisional unintended behaviour, then there's a lot to like in Entity Framework :) 
		Although there may be times when you want to improve a critical hotspot in your code or wish to escape EF's abstractions and flex your SQL skills by issuing 
		optimized and complex SQL queries. For these situations you can make use of any of the included 
		<a href="http://mono.servicestack.net/benchmarks/#dapper">2 fastest Micro ORMs</a> in .NET in 
		<a href="http://code.google.com/p/dapper-dot-net/">Dapper</a> and <a href="https://github.com/ServiceStack/ServiceStack.OrmLite">OrmLite</a>. 
		Both ORMs work the same way in that they're simply Extension methods hanging off ADO.NET's <kbd>System.Data.*</kbd> interfaces. 
		Since they don't require any config to setup, can make use your existing dbConnection and maps to clean POCOs - they are an easy and non-invasive option to use.
	</p>
	<p>
		The best way to optimize pages with heavy database access is to profile it, and an easy way to do that is to make use of the 
		<a href="http://code.google.com/p/mvc-mini-profiler/">Mvc MiniProfiler</a> embedded in ServiceStack. 
		The profiler has special support for profiling Entity Framework, Linq2Sql, Dapper and OrmLite.
		There's screenshots and a good overview of how to enable it in the <a href="https://github.com/ServiceStack/ServiceStack/wiki/Release-Notes">v3.09 Release Notes</a>.
	</p>

	<h4>ServiceStack REST Web Services</h4>
	<p>
		<img src="restapi.png" alt="/api" align="left" />
		By now you should have a fairly good idea of the different libraries that make up the ServiceStack Framework and the core philosophy behind them promoting clean, simple, performance-focused solutions around good coding practices. The Web Service Framework itself closely follows this thread and extends it further by also promoting established remote service practices - uncommon in the .NET world. To get a flavour of its simple API, a basic 
		<a href="https://github.com/ServiceStack/ServiceStack/blob/master/NuGet/ServiceStack.Host.Mvc/content/App_Start/ServiceStackFramework.cs.pp#L85">Web Service</a> and 
		<a href="https://github.com/ServiceStack/ServiceStack/blob/master/NuGet/ServiceStack.Host.Mvc/content/App_Start/ServiceStackFramework.cs.pp#L107">REST Service</a> are included in this NuGet package
		and hosted from <b>/api</b>. Here's a recent thread describing 
		<a href="https://groups.google.com/forum/#!msg/servicestack/D8hcApC0mfI/V45CG7SMxdQJ">ServiceStack's DTO-first advantages vs WCF's RPC paradigm</a>.
	</p>
	<p>
		<i>In a CoffeeTable overview:</i> ServiceStack is a 
		<a href="http://servicestack.net/benchmarks/">high-performance</a>, 
		<a href="http://mono.servicestack.net/files/slides-crossplatform.png">cross-platform</a> web service framework encouraging established remote services best practices (i.e. Martin Fowlers 
		<a href="http://martinfowler.com/eaaCatalog/remoteFacade.html">Remote Facade</a>, 
		<a href="http://martinfowler.com/eaaCatalog/dataTransferObject.html">DTO</a>, 
		<a href="http://martinfowler.com/eaaCatalog/gateway.html">Gateway</a>) common in the Java world and improved upon in ServiceStack after taking advantage of C#'s language features yielding a succinct and expressive framework that's also a friendly option for <a href="http://mono.servicestack.net/mythz_blog/?p=785">F# (on Win or Mono)</a>.
	</p>
	<p>
		ServiceStack has strong support for all web formats where all services created automatically enable JSON, XML, HTML, CSV, JSV, SOAP 1.1/1.2 wire formats incl. HTML ContentTypes (form-urlencoded/multipart) and calling conventions (JSONP) out-of-the-box with <b>no XML config required :)</b>. Whilst it only takes a single <acronym title="Line of Code">LOC</acronym> to disable system-wide features. 
	</p>
	<p>
		For developer productivity viewing your web service in a browser returns a 
		<a href="https://github.com/ServiceStack/ServiceStack/wiki/HTML5ReportFormat">HTML5 JSON Report</a> where its response can be introspected at a glance and a 
		<a href="https://github.com/ServiceStack/ServiceStack/wiki/Release-Notes">built-in Mini Profiler</a> to easily able you to audit your web services execution times.
	</p>
	<p>
		It's code-first DTO approach renders the API nearly invisible (i.e. the best kind :), getting out of your way to provide a friction-free dev experience where services are defined using typed, code-first DTOs making it a cinch to create coarse-grained APIs (best practice for remote communications). 
		By default services bind to a <acronym title="Dependency Injection">DI</acronym>/<acronym title="Domain Driven Design">DDD</acronym> clean room where it need only implement the dependency-free 
		<a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/ServiceHost/IService.cs">IService</a> that accepts your C# Request POCO and
		<a href="http://stackoverflow.com/questions/6245616/does-servicestack-support-binary-responses/6249042#6249042">lets you return any C# object</a>, generating the desired output.
		C# Exceptions are handled as well, serialized into your Response DTO and sent with the preferred HTTP Status Code.
		It's layered design enforces loosely-coupled and testable code where
		<a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.WebHost.IntegrationTests/Tests/WebServicesTests.cs">the same unit test can run as an Integration test</a> on all JSON, XML, JSV and SOAP endpoints. 		
	</p>
	<p>
		For client/server connectivity, succinct and strong-typed 
		<a href="http://mono.servicestack.net/RestFiles/#!files/tests/SyncRestClientTests.cs.txt">Sync</a> and 
		<a href="http://mono.servicestack.net/RestFiles/#!files/tests/AsyncRestClientTests.cs.txt">Async</a> 
		generic service clients are included enabling typed access end-to-end without any code-gen (re-using code-first DTOs) on .NET/Mono platforms including 
		<a href="https://github.com/ServiceStack/ServiceStack.Examples/blob/master/src/MonoTouch/RestFilesClient/RestFilesClient/Main.cs#L46">MonoTouch</a>. 
		Whilst it works cleanly with popular Ajax libraries like 
		<a href="http://mono.servicestack.net/RestFiles/#!files">jQuery</a> and 
		<a href="http://mono.servicestack.net/Backbone.Todos/">Backbone.js</a> without requiring any bloated special-purpose libs to call your services.
	</p>

	<h4>And lots more...</h4>
	<p>
		<img src="xcode.png" alt="utils" align="right" />
		In addition to the above, ServiceStack includes many other little nuggets to ease your development burden and help in achieving your next online masterpiece! Many utils are stored in Extension methods that are naturally discoverable during your day-to-day VS.NET travels. Here are some of the more notable features:
	</p>
	<ul>
		<li>
			<a href="https://github.com/ServiceStack/ServiceStack.Redis/">Full-featured C# Redis Client</a> for access to the fastest distributed NoSQL data store - unprecendented power at your fingertips!
		</li>
		<li>
			<a href="http://mono.servicestack.net/mythz_blog/?p=202">T.Dump() extension method</a> which recursively dumps all the public properties of any type into a human readable "pretty formatted" string.
		</li>
		<li>
			<a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/Utils/ReflectionUtils.cs#L124">TranslateTo&lt;T&gt; and PopulateWith&lt;T&gt;</a> extension methods
			for mapping between C# models.
		</li>
		<li>
			<a href="https://github.com/ServiceStack/ServiceStack/tree/master/src/ServiceStack.Interfaces/Messaging">Messaging API</a> with 
			<a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.Messaging.Tests/TransientServiceMessagingTests.cs">In-Memory</a> 
			and 
			<a href="https://github.com/ServiceStack/ServiceStack.Redis/blob/master/tests/ServiceStack.Redis.Tests/RedisMqHostTests.cs">Redis MQ</a>
			hosts allowing you to reliably defer and execute async logic in background tasks.
		</li>
	</ul>

	<h4>Where to next...</h4>
	<p>
		Follow <a href="https://twitter.com/ServiceStack">@ServiceStack</a> for updates. Read the <a href="http://mono.servicestack.net/docs/">documentation</a>.
		Ask questions on <a href="http://stackoverflow.com">StackOverflow</a> (with the <kbd>ServiceStack</kbd> tag) or by posting to
		<a href="https://groups.google.com/forum/#!forum/servicestack">ServiceStack's mailing list</a>. <br/>
		For real-time support (that you just can't buy :) we're usually hanging out in <a href="http://jabbr.net/#/rooms/servicestack">http://jabbr.net/servicestack</a>
	</p>
	<p>
		Enjoy!
	</p>

</div>


<span class="r"></span>
<div id="footer">
	Copyright &copy; 2011 Liquidbit Ltd. All rights reserved.
</div>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-7722718-7");
pageTracker._trackPageview();
} catch(err) {}</script>
</body>
</html>
